//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""MainControls"",
            ""id"": ""2d1384a6-8936-4dfb-a8be-f4ecae2671bf"",
            ""actions"": [
                {
                    ""name"": ""ForwardBackwardMovement"",
                    ""type"": ""Button"",
                    ""id"": ""adcbf4ff-178d-4fb6-aacd-357314e6046c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftRightMovement"",
                    ""type"": ""Button"",
                    ""id"": ""c6ad58e7-5fca-4335-90ce-6cef97f32717"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""da2d626c-1569-4953-95e4-bd8f0ed65a78"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Camera"",
                    ""type"": ""Value"",
                    ""id"": ""ca1d6093-4189-435f-b50e-de4f454266e3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""1b926088-8d46-4f0c-af13-3a9bab3853f8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""7baa179f-ef5f-4606-aafc-9999ac867903"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""f471249e-e3d0-47bd-bb4c-74c411853a3c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForwardBackwardMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""ccb0a2ce-db6d-4f9e-9837-50601c5a98c3"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForwardBackwardMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""ada315c4-c559-43a1-afff-56fa00fe597c"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForwardBackwardMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""601b141a-aa60-4380-985a-7b3b41989974"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftRightMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""7a420a9a-cb38-4b93-aa7e-427b534139ee"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftRightMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""4620d465-c96b-44ce-b193-f677f663ab8e"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftRightMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3103b6cc-42fa-4a92-8ce6-e9caac007681"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9d53648f-cece-41d0-b9ba-1db4f6d3b952"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0edc9b1f-23f7-49bc-bc75-37226b1836e7"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SystemControls"",
            ""id"": ""f87615ab-9dad-44be-b3e2-804d80e03e66"",
            ""actions"": [
                {
                    ""name"": ""Yes"",
                    ""type"": ""Button"",
                    ""id"": ""81395c67-7d3c-41de-b772-77d5865d8bac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""No"",
                    ""type"": ""Button"",
                    ""id"": ""eb6527aa-a172-4873-96eb-6fc9060c55f7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UpDown"",
                    ""type"": ""Button"",
                    ""id"": ""e0f4dfed-c3c8-4e78-af42-b4bad5a80d36"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftRight"",
                    ""type"": ""Button"",
                    ""id"": ""39517b47-abf7-4548-8c33-78341c84fe9d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""92012f23-7dae-4119-8fb6-3f7e61e45c53"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""b9c316cd-36e8-4739-9491-bd52d8a24e92"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDown"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""c881fdff-223e-49c2-aa1d-4b20c808cf40"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""a943742a-31b2-4b3a-95e0-dddb22b830ec"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""b04e7497-713f-44ed-a1a0-d0a57366cebe"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftRight"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""18b32eb2-02e0-4d9d-99d0-78fb863d84ee"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""20f7ce31-6c79-431e-a94b-05333e8a3fe4"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e360d6ab-35ce-46a8-9b61-dbb2bd5b90dd"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""No"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MainControls
        m_MainControls = asset.FindActionMap("MainControls", throwIfNotFound: true);
        m_MainControls_ForwardBackwardMovement = m_MainControls.FindAction("ForwardBackwardMovement", throwIfNotFound: true);
        m_MainControls_LeftRightMovement = m_MainControls.FindAction("LeftRightMovement", throwIfNotFound: true);
        m_MainControls_Jump = m_MainControls.FindAction("Jump", throwIfNotFound: true);
        m_MainControls_Camera = m_MainControls.FindAction("Camera", throwIfNotFound: true);
        m_MainControls_Sprint = m_MainControls.FindAction("Sprint", throwIfNotFound: true);
        m_MainControls_Attack = m_MainControls.FindAction("Attack", throwIfNotFound: true);
        // SystemControls
        m_SystemControls = asset.FindActionMap("SystemControls", throwIfNotFound: true);
        m_SystemControls_Yes = m_SystemControls.FindAction("Yes", throwIfNotFound: true);
        m_SystemControls_No = m_SystemControls.FindAction("No", throwIfNotFound: true);
        m_SystemControls_UpDown = m_SystemControls.FindAction("UpDown", throwIfNotFound: true);
        m_SystemControls_LeftRight = m_SystemControls.FindAction("LeftRight", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainControls
    private readonly InputActionMap m_MainControls;
    private IMainControlsActions m_MainControlsActionsCallbackInterface;
    private readonly InputAction m_MainControls_ForwardBackwardMovement;
    private readonly InputAction m_MainControls_LeftRightMovement;
    private readonly InputAction m_MainControls_Jump;
    private readonly InputAction m_MainControls_Camera;
    private readonly InputAction m_MainControls_Sprint;
    private readonly InputAction m_MainControls_Attack;
    public struct MainControlsActions
    {
        private @Controls m_Wrapper;
        public MainControlsActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ForwardBackwardMovement => m_Wrapper.m_MainControls_ForwardBackwardMovement;
        public InputAction @LeftRightMovement => m_Wrapper.m_MainControls_LeftRightMovement;
        public InputAction @Jump => m_Wrapper.m_MainControls_Jump;
        public InputAction @Camera => m_Wrapper.m_MainControls_Camera;
        public InputAction @Sprint => m_Wrapper.m_MainControls_Sprint;
        public InputAction @Attack => m_Wrapper.m_MainControls_Attack;
        public InputActionMap Get() { return m_Wrapper.m_MainControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainControlsActions set) { return set.Get(); }
        public void SetCallbacks(IMainControlsActions instance)
        {
            if (m_Wrapper.m_MainControlsActionsCallbackInterface != null)
            {
                @ForwardBackwardMovement.started -= m_Wrapper.m_MainControlsActionsCallbackInterface.OnForwardBackwardMovement;
                @ForwardBackwardMovement.performed -= m_Wrapper.m_MainControlsActionsCallbackInterface.OnForwardBackwardMovement;
                @ForwardBackwardMovement.canceled -= m_Wrapper.m_MainControlsActionsCallbackInterface.OnForwardBackwardMovement;
                @LeftRightMovement.started -= m_Wrapper.m_MainControlsActionsCallbackInterface.OnLeftRightMovement;
                @LeftRightMovement.performed -= m_Wrapper.m_MainControlsActionsCallbackInterface.OnLeftRightMovement;
                @LeftRightMovement.canceled -= m_Wrapper.m_MainControlsActionsCallbackInterface.OnLeftRightMovement;
                @Jump.started -= m_Wrapper.m_MainControlsActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_MainControlsActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_MainControlsActionsCallbackInterface.OnJump;
                @Camera.started -= m_Wrapper.m_MainControlsActionsCallbackInterface.OnCamera;
                @Camera.performed -= m_Wrapper.m_MainControlsActionsCallbackInterface.OnCamera;
                @Camera.canceled -= m_Wrapper.m_MainControlsActionsCallbackInterface.OnCamera;
                @Sprint.started -= m_Wrapper.m_MainControlsActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_MainControlsActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_MainControlsActionsCallbackInterface.OnSprint;
                @Attack.started -= m_Wrapper.m_MainControlsActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_MainControlsActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_MainControlsActionsCallbackInterface.OnAttack;
            }
            m_Wrapper.m_MainControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ForwardBackwardMovement.started += instance.OnForwardBackwardMovement;
                @ForwardBackwardMovement.performed += instance.OnForwardBackwardMovement;
                @ForwardBackwardMovement.canceled += instance.OnForwardBackwardMovement;
                @LeftRightMovement.started += instance.OnLeftRightMovement;
                @LeftRightMovement.performed += instance.OnLeftRightMovement;
                @LeftRightMovement.canceled += instance.OnLeftRightMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Camera.started += instance.OnCamera;
                @Camera.performed += instance.OnCamera;
                @Camera.canceled += instance.OnCamera;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
            }
        }
    }
    public MainControlsActions @MainControls => new MainControlsActions(this);

    // SystemControls
    private readonly InputActionMap m_SystemControls;
    private ISystemControlsActions m_SystemControlsActionsCallbackInterface;
    private readonly InputAction m_SystemControls_Yes;
    private readonly InputAction m_SystemControls_No;
    private readonly InputAction m_SystemControls_UpDown;
    private readonly InputAction m_SystemControls_LeftRight;
    public struct SystemControlsActions
    {
        private @Controls m_Wrapper;
        public SystemControlsActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Yes => m_Wrapper.m_SystemControls_Yes;
        public InputAction @No => m_Wrapper.m_SystemControls_No;
        public InputAction @UpDown => m_Wrapper.m_SystemControls_UpDown;
        public InputAction @LeftRight => m_Wrapper.m_SystemControls_LeftRight;
        public InputActionMap Get() { return m_Wrapper.m_SystemControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SystemControlsActions set) { return set.Get(); }
        public void SetCallbacks(ISystemControlsActions instance)
        {
            if (m_Wrapper.m_SystemControlsActionsCallbackInterface != null)
            {
                @Yes.started -= m_Wrapper.m_SystemControlsActionsCallbackInterface.OnYes;
                @Yes.performed -= m_Wrapper.m_SystemControlsActionsCallbackInterface.OnYes;
                @Yes.canceled -= m_Wrapper.m_SystemControlsActionsCallbackInterface.OnYes;
                @No.started -= m_Wrapper.m_SystemControlsActionsCallbackInterface.OnNo;
                @No.performed -= m_Wrapper.m_SystemControlsActionsCallbackInterface.OnNo;
                @No.canceled -= m_Wrapper.m_SystemControlsActionsCallbackInterface.OnNo;
                @UpDown.started -= m_Wrapper.m_SystemControlsActionsCallbackInterface.OnUpDown;
                @UpDown.performed -= m_Wrapper.m_SystemControlsActionsCallbackInterface.OnUpDown;
                @UpDown.canceled -= m_Wrapper.m_SystemControlsActionsCallbackInterface.OnUpDown;
                @LeftRight.started -= m_Wrapper.m_SystemControlsActionsCallbackInterface.OnLeftRight;
                @LeftRight.performed -= m_Wrapper.m_SystemControlsActionsCallbackInterface.OnLeftRight;
                @LeftRight.canceled -= m_Wrapper.m_SystemControlsActionsCallbackInterface.OnLeftRight;
            }
            m_Wrapper.m_SystemControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Yes.started += instance.OnYes;
                @Yes.performed += instance.OnYes;
                @Yes.canceled += instance.OnYes;
                @No.started += instance.OnNo;
                @No.performed += instance.OnNo;
                @No.canceled += instance.OnNo;
                @UpDown.started += instance.OnUpDown;
                @UpDown.performed += instance.OnUpDown;
                @UpDown.canceled += instance.OnUpDown;
                @LeftRight.started += instance.OnLeftRight;
                @LeftRight.performed += instance.OnLeftRight;
                @LeftRight.canceled += instance.OnLeftRight;
            }
        }
    }
    public SystemControlsActions @SystemControls => new SystemControlsActions(this);
    public interface IMainControlsActions
    {
        void OnForwardBackwardMovement(InputAction.CallbackContext context);
        void OnLeftRightMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnCamera(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
    }
    public interface ISystemControlsActions
    {
        void OnYes(InputAction.CallbackContext context);
        void OnNo(InputAction.CallbackContext context);
        void OnUpDown(InputAction.CallbackContext context);
        void OnLeftRight(InputAction.CallbackContext context);
    }
}
